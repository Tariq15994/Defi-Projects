{"ast":null,"code":"import _asyncToGenerator from\"/home/tariq/Defi-Projects/nft-market-place/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/home/tariq/Defi-Projects/nft-market-place/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/home/tariq/Defi-Projects/nft-market-place/frontend/node_modules/@babel/runtime/regenerator/index.js\";import{useState}from'react';import{ethers}from\"ethers\";import{Row,Form,Button}from'react-bootstrap';import{create as ipfsHttpClient}from'ipfs-http-client';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var client=ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');// const pinataApiKey = \"695c0cebe9c414c5c8f7\";\n// const pinataSecretApiKey = \"dcd3c355c12cac816838d0123aebbd17cc60b75a9b310ea81b474396c74f4bd5\";\n// const axios = require(\"axios\");\n// const fs = require(\"fs\");\n// const FormData = require(\"form-data\");\n// const pinFileToIPFS = async (file) => {\n//   const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n//   let data = new FormData();\n//   data.append(\"file\", fs.createReadStream());\n//   const res = await axios.post(url, data, {\n//     maxContentLength: \"Infinity\", \n//     headers: {\n//       \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n//       pinata_api_key: pinataApiKey, \n//       pinata_secret_api_key: pinataSecretApiKey,\n//     },\n//   });\n//   console.log(res.data);\n// };\nvar Create=function Create(_ref){var marketplace=_ref.marketplace,nft=_ref.nft;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),image=_useState2[0],setImage=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),price=_useState4[0],setPrice=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),name=_useState6[0],setName=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),description=_useState8[0],setDescription=_useState8[1];var uploadToIPFS=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var file,result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event.preventDefault();file=event.target.files[0];if(!(typeof file!=='undefined')){_context.next=14;break;}_context.prev=3;_context.next=6;return client.add(file);case 6:result=_context.sent;console.log(result);setImage(\"https://ipfs.infura.io/ipfs/\".concat(result.path));_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](3);console.log(\"ipfs image upload error: \",_context.t0);case 14:case\"end\":return _context.stop();}}},_callee,null,[[3,11]]);}));return function uploadToIPFS(_x){return _ref2.apply(this,arguments);};}();var createNFT=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(!image||!price||!name||!description)){_context2.next=2;break;}return _context2.abrupt(\"return\");case 2:_context2.prev=2;_context2.next=5;return client.add(JSON.stringify({image:image,price:price,name:name,description:description}));case 5:result=_context2.sent;mintThenList(result);_context2.next=12;break;case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](2);console.log(\"ipfs uri upload error: \",_context2.t0);case 12:case\"end\":return _context2.stop();}}},_callee2,null,[[2,9]]);}));return function createNFT(){return _ref3.apply(this,arguments);};}();var mintThenList=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(result){var uri,id,listingPrice;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:uri=\"https://ipfs.infura.io/ipfs/\".concat(result.path);// mint nft \n_context3.next=3;return nft.mint(uri);case 3:_context3.next=5;return _context3.sent.wait();case 5:_context3.next=7;return nft.tokenCount();case 7:id=_context3.sent;_context3.next=10;return nft.setApprovalForAll(marketplace.address,true);case 10:_context3.next=12;return _context3.sent.wait();case 12:// add nft to marketplace\nlistingPrice=ethers.utils.parseEther(price.toString());_context3.next=15;return marketplace.makeItem(nft.address,id,listingPrice);case 15:_context3.next=17;return _context3.sent.wait();case 17:case\"end\":return _context3.stop();}}},_callee3);}));return function mintThenList(_x2){return _ref4.apply(this,arguments);};}();return/*#__PURE__*/_jsx(\"div\",{className:\"container-fluid mt-5\",children:/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsx(\"main\",{role:\"main\",className:\"col-lg-12 mx-auto \",style:{maxWidth:'100vh',minHeight:'100vh'},children:/*#__PURE__*/_jsx(\"div\",{className:\"content mx-auto\",children:/*#__PURE__*/_jsxs(Row,{className:\"g-4\",children:[/*#__PURE__*/_jsx(Form.Control,{type:\"file\",required:true,name:\"file\",onChange:uploadToIPFS}),/*#__PURE__*/_jsx(Form.Control,{onChange:function onChange(e){return setName(e.target.value);},size:\"lg\",required:true,type:\"text\",placeholder:\"Name\"}),/*#__PURE__*/_jsx(Form.Control,{onChange:function onChange(e){return setDescription(e.target.value);},size:\"lg\",required:true,as:\"textarea\",placeholder:\"Description\"}),/*#__PURE__*/_jsx(Form.Control,{onChange:function onChange(e){return setPrice(e.target.value);},size:\"lg\",required:true,type:\"number\",placeholder:\"Price in ETH\"}),/*#__PURE__*/_jsx(\"div\",{className:\"d-grid px-0\",children:/*#__PURE__*/_jsx(Button,{onClick:createNFT,variant:\"primary\",size:\"lg\",children:\"Create & List NFT!\"})})]})})})})});};export default Create;","map":{"version":3,"sources":["/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/Create.js"],"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","client","Create","marketplace","nft","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToIPFS","event","preventDefault","file","target","files","add","result","console","log","path","createNFT","JSON","stringify","mintThenList","uri","mint","wait","tokenCount","id","setApprovalForAll","address","listingPrice","utils","parseEther","toString","makeItem","maxWidth","minHeight","e","value"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Form, Button } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\n// const pinataApiKey = \"695c0cebe9c414c5c8f7\";\n// const pinataSecretApiKey = \"dcd3c355c12cac816838d0123aebbd17cc60b75a9b310ea81b474396c74f4bd5\";\n// const axios = require(\"axios\");\n// const fs = require(\"fs\");\n// const FormData = require(\"form-data\");\n// const pinFileToIPFS = async (file) => {\n//   const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n//   let data = new FormData();\n//   data.append(\"file\", fs.createReadStream());\n//   const res = await axios.post(url, data, {\n//     maxContentLength: \"Infinity\", \n//     headers: {\n//       \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n//       pinata_api_key: pinataApiKey, \n//       pinata_secret_api_key: pinataSecretApiKey,\n//     },\n//   });\n//   console.log(res.data);\n// };\n\n\n\n\n\nconst Create = ({ marketplace, nft }) => {\n  const [image, setImage] = useState('')\n  const [price, setPrice] = useState(null)\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n  const uploadToIPFS = async (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    \n    if (typeof file !== 'undefined') {\n      try {\n        // pinFileToIPFS(file);\n        const result = await client.add(file)\n        console.log(result)\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n      } catch (error){\n        console.log(\"ipfs image upload error: \", error)\n      }\n    }\n  }\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return\n    try{\n      const result = await client.add(JSON.stringify({image, price, name, description}))\n      mintThenList(result)\n    } catch(error) {\n      console.log(\"ipfs uri upload error: \", error)\n    }\n  }\n  const mintThenList = async (result) => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n    // mint nft \n    await(await nft.mint(uri)).wait()\n    // get tokenId of new nft \n    const id = await nft.tokenCount()\n    // approve marketplace to spend nft\n    await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n    // add nft to marketplace\n    const listingPrice = ethers.utils.parseEther(price.toString())\n    await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n  }\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main role=\"main\" className=\"col-lg-12 mx-auto \" style={{ maxWidth: '100vh', minHeight:'100vh' }}>\n          <div className=\"content mx-auto\">\n            <Row className=\"g-4\"  >\n              <Form.Control\n                type=\"file\"\n                required\n                name=\"file\"\n                onChange={uploadToIPFS}\n              />\n              <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n              <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n              <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n              <div className=\"d-grid px-0\">\n                <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n                  Create & List NFT!\n                </Button>\n              </div>\n            </Row>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Create"]},"metadata":{},"sourceType":"module"}
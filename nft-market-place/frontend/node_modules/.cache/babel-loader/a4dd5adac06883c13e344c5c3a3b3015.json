{"ast":null,"code":"var _jsxFileName = \"/home/tariq/nft-market-place/frontend/src/components/Create.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');\nconst pinataApiKey = \"695c0cebe9c414c5c8f7\";\nconst pinataSecretApiKey = \"dcd3c355c12cac816838d0123aebbd17cc60b75a9b310ea81b474396c74f4bd5\";\n\nconst axios = require(\"axios\");\n\nconst fs = require(\"fs\");\n\nconst FormData = require(\"form-data\");\n\nconst pinFileToIPFS = async file => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n  let data = new FormData();\n  data.append(\"file\", fs.createReadStream());\n  const res = await axios.post(url, data, {\n    maxContentLength: \"Infinity\",\n    headers: {\n      \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n      pinata_api_key: pinataApiKey,\n      pinata_secret_api_key: pinataSecretApiKey\n    }\n  });\n  console.log(res.data);\n};\n\nconst Create = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    nft\n  } = _ref;\n  const [image, setImage] = useState('');\n  const [price, setPrice] = useState(null);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n\n  const uploadToIPFS = async event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n\n    if (typeof file !== 'undefined') {\n      try {\n        pinFileToIPFS(file);\n        const result = await client.add(file);\n        console.log(result);\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`);\n      } catch (error) {\n        console.log(\"ipfs image upload error: \", error);\n      }\n    }\n  };\n\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return;\n\n    try {\n      const result = await client.add(JSON.stringify({\n        image,\n        price,\n        name,\n        description\n      }));\n      mintThenList(result);\n    } catch (error) {\n      console.log(\"ipfs uri upload error: \", error);\n    }\n  };\n\n  const mintThenList = async result => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`; // mint nft \n\n    await (await nft.mint(uri)).wait(); // get tokenId of new nft \n\n    const id = await nft.tokenCount(); // approve marketplace to spend nft\n\n    await (await nft.setApprovalForAll(marketplace.address, true)).wait(); // add nft to marketplace\n\n    const listingPrice = ethers.utils.parseEther(price.toString());\n    await (await marketplace.makeItem(nft.address, id, listingPrice)).wait();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              required: true,\n              name: \"file\",\n              onChange: uploadToIPFS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setName(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"text\",\n              placeholder: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setDescription(e.target.value),\n              size: \"lg\",\n              required: true,\n              as: \"textarea\",\n              placeholder: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              onChange: e => setPrice(e.target.value),\n              size: \"lg\",\n              required: true,\n              type: \"number\",\n              placeholder: \"Price in ETH\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: createNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Create & List NFT!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Create, \"CejF301mm3S45QBEXO/SVXCwDzQ=\");\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["/home/tariq/nft-market-place/frontend/src/components/Create.js"],"names":["useState","ethers","Row","Form","Button","create","ipfsHttpClient","client","pinataApiKey","pinataSecretApiKey","axios","require","fs","FormData","pinFileToIPFS","file","url","data","append","createReadStream","res","post","maxContentLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","console","log","Create","marketplace","nft","image","setImage","price","setPrice","name","setName","description","setDescription","uploadToIPFS","event","preventDefault","target","files","result","add","path","error","createNFT","JSON","stringify","mintThenList","uri","mint","wait","id","tokenCount","setApprovalForAll","address","listingPrice","utils","parseEther","toString","makeItem","maxWidth","e","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,QAAkC,iBAAlC;AACA,SAASC,MAAM,IAAIC,cAAnB,QAAyC,kBAAzC;;AACA,MAAMC,MAAM,GAAGD,cAAc,CAAC,oCAAD,CAA7B;AAEA,MAAME,YAAY,GAAG,sBAArB;AACA,MAAMC,kBAAkB,GAAG,kEAA3B;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAMG,aAAa,GAAG,MAAOC,IAAP,IAAgB;AACpC,QAAMC,GAAG,GAAI,gDAAb;AACA,MAAIC,IAAI,GAAG,IAAIJ,QAAJ,EAAX;AACAI,EAAAA,IAAI,CAACC,MAAL,CAAY,MAAZ,EAAoBN,EAAE,CAACO,gBAAH,EAApB;AACA,QAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAWL,GAAX,EAAgBC,IAAhB,EAAsB;AACtCK,IAAAA,gBAAgB,EAAE,UADoB;AAEtCC,IAAAA,OAAO,EAAE;AACP,sBAAiB,iCAAgCN,IAAI,CAACO,SAAU,EADzD;AAEPC,MAAAA,cAAc,EAAEjB,YAFT;AAGPkB,MAAAA,qBAAqB,EAAEjB;AAHhB;AAF6B,GAAtB,CAAlB;AAQAkB,EAAAA,OAAO,CAACC,GAAR,CAAYR,GAAG,CAACH,IAAhB;AACD,CAbD;;AAmBA,MAAMY,MAAM,GAAG,QAA0B;AAAA;;AAAA,MAAzB;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAyB;AACvC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACkC,KAAD,EAAQC,QAAR,IAAoBnC,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACoC,IAAD,EAAOC,OAAP,IAAkBrC,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACsC,WAAD,EAAcC,cAAd,IAAgCvC,QAAQ,CAAC,EAAD,CAA9C;;AACA,QAAMwC,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAM3B,IAAI,GAAG0B,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb;;AAEA,QAAI,OAAO7B,IAAP,KAAgB,WAApB,EAAiC;AAC/B,UAAI;AACFD,QAAAA,aAAa,CAACC,IAAD,CAAb;AACA,cAAM8B,MAAM,GAAG,MAAMtC,MAAM,CAACuC,GAAP,CAAW/B,IAAX,CAArB;AACAY,QAAAA,OAAO,CAACC,GAAR,CAAYiB,MAAZ;AACAZ,QAAAA,QAAQ,CAAE,+BAA8BY,MAAM,CAACE,IAAK,EAA5C,CAAR;AACD,OALD,CAKE,OAAOC,KAAP,EAAa;AACbrB,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCoB,KAAzC;AACD;AACF;AACF,GAdD;;AAeA,QAAMC,SAAS,GAAG,YAAY;AAC5B,QAAI,CAACjB,KAAD,IAAU,CAACE,KAAX,IAAoB,CAACE,IAArB,IAA6B,CAACE,WAAlC,EAA+C;;AAC/C,QAAG;AACD,YAAMO,MAAM,GAAG,MAAMtC,MAAM,CAACuC,GAAP,CAAWI,IAAI,CAACC,SAAL,CAAe;AAACnB,QAAAA,KAAD;AAAQE,QAAAA,KAAR;AAAeE,QAAAA,IAAf;AAAqBE,QAAAA;AAArB,OAAf,CAAX,CAArB;AACAc,MAAAA,YAAY,CAACP,MAAD,CAAZ;AACD,KAHD,CAGE,OAAMG,KAAN,EAAa;AACbrB,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCoB,KAAvC;AACD;AACF,GARD;;AASA,QAAMI,YAAY,GAAG,MAAOP,MAAP,IAAkB;AACrC,UAAMQ,GAAG,GAAI,+BAA8BR,MAAM,CAACE,IAAK,EAAvD,CADqC,CAErC;;AACA,UAAK,CAAC,MAAMhB,GAAG,CAACuB,IAAJ,CAASD,GAAT,CAAP,EAAsBE,IAAtB,EAAL,CAHqC,CAIrC;;AACA,UAAMC,EAAE,GAAG,MAAMzB,GAAG,CAAC0B,UAAJ,EAAjB,CALqC,CAMrC;;AACA,UAAK,CAAC,MAAM1B,GAAG,CAAC2B,iBAAJ,CAAsB5B,WAAW,CAAC6B,OAAlC,EAA2C,IAA3C,CAAP,EAAyDJ,IAAzD,EAAL,CAPqC,CAQrC;;AACA,UAAMK,YAAY,GAAG3D,MAAM,CAAC4D,KAAP,CAAaC,UAAb,CAAwB5B,KAAK,CAAC6B,QAAN,EAAxB,CAArB;AACA,UAAK,CAAC,MAAMjC,WAAW,CAACkC,QAAZ,CAAqBjC,GAAG,CAAC4B,OAAzB,EAAkCH,EAAlC,EAAsCI,YAAtC,CAAP,EAA4DL,IAA5D,EAAL;AACD,GAXD;;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,SAAS,EAAC,mBAA5B;AAAgD,QAAA,KAAK,EAAE;AAAEU,UAAAA,QAAQ,EAAE;AAAZ,SAAvD;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,iCACE,QAAC,GAAD;AAAK,YAAA,SAAS,EAAC,KAAf;AAAA,oCACE,QAAC,IAAD,CAAM,OAAN;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,QAAQ,MAFV;AAGE,cAAA,IAAI,EAAC,MAHP;AAIE,cAAA,QAAQ,EAAEzB;AAJZ;AAAA;AAAA;AAAA;AAAA,oBADF,eAOE,QAAC,IAAD,CAAM,OAAN;AAAc,cAAA,QAAQ,EAAG0B,CAAD,IAAO7B,OAAO,CAAC6B,CAAC,CAACvB,MAAF,CAASwB,KAAV,CAAtC;AAAwD,cAAA,IAAI,EAAC,IAA7D;AAAkE,cAAA,QAAQ,MAA1E;AAA2E,cAAA,IAAI,EAAC,MAAhF;AAAuF,cAAA,WAAW,EAAC;AAAnG;AAAA;AAAA;AAAA;AAAA,oBAPF,eAQE,QAAC,IAAD,CAAM,OAAN;AAAc,cAAA,QAAQ,EAAGD,CAAD,IAAO3B,cAAc,CAAC2B,CAAC,CAACvB,MAAF,CAASwB,KAAV,CAA7C;AAA+D,cAAA,IAAI,EAAC,IAApE;AAAyE,cAAA,QAAQ,MAAjF;AAAkF,cAAA,EAAE,EAAC,UAArF;AAAgG,cAAA,WAAW,EAAC;AAA5G;AAAA;AAAA;AAAA;AAAA,oBARF,eASE,QAAC,IAAD,CAAM,OAAN;AAAc,cAAA,QAAQ,EAAGD,CAAD,IAAO/B,QAAQ,CAAC+B,CAAC,CAACvB,MAAF,CAASwB,KAAV,CAAvC;AAAyD,cAAA,IAAI,EAAC,IAA9D;AAAmE,cAAA,QAAQ,MAA3E;AAA4E,cAAA,IAAI,EAAC,QAAjF;AAA0F,cAAA,WAAW,EAAC;AAAtG;AAAA;AAAA;AAAA;AAAA,oBATF,eAUE;AAAK,cAAA,SAAS,EAAC,aAAf;AAAA,qCACE,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAElB,SAAjB;AAA4B,gBAAA,OAAO,EAAC,SAApC;AAA8C,gBAAA,IAAI,EAAC,IAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CAnED;;GAAMpB,M;;KAAAA,M;AAqEN,eAAeA,MAAf","sourcesContent":["import { useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Form, Button } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\nconst pinataApiKey = \"695c0cebe9c414c5c8f7\";\nconst pinataSecretApiKey = \"dcd3c355c12cac816838d0123aebbd17cc60b75a9b310ea81b474396c74f4bd5\";\nconst axios = require(\"axios\");\nconst fs = require(\"fs\");\nconst FormData = require(\"form-data\");\nconst pinFileToIPFS = async (file) => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n  let data = new FormData();\n  data.append(\"file\", fs.createReadStream());\n  const res = await axios.post(url, data, {\n    maxContentLength: \"Infinity\", \n    headers: {\n      \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n      pinata_api_key: pinataApiKey, \n      pinata_secret_api_key: pinataSecretApiKey,\n    },\n  });\n  console.log(res.data);\n};\n\n\n\n\n\nconst Create = ({ marketplace, nft }) => {\n  const [image, setImage] = useState('')\n  const [price, setPrice] = useState(null)\n  const [name, setName] = useState('')\n  const [description, setDescription] = useState('')\n  const uploadToIPFS = async (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    \n    if (typeof file !== 'undefined') {\n      try {\n        pinFileToIPFS(file);\n        const result = await client.add(file)\n        console.log(result)\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n      } catch (error){\n        console.log(\"ipfs image upload error: \", error)\n      }\n    }\n  }\n  const createNFT = async () => {\n    if (!image || !price || !name || !description) return\n    try{\n      const result = await client.add(JSON.stringify({image, price, name, description}))\n      mintThenList(result)\n    } catch(error) {\n      console.log(\"ipfs uri upload error: \", error)\n    }\n  }\n  const mintThenList = async (result) => {\n    const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n    // mint nft \n    await(await nft.mint(uri)).wait()\n    // get tokenId of new nft \n    const id = await nft.tokenCount()\n    // approve marketplace to spend nft\n    await(await nft.setApprovalForAll(marketplace.address, true)).wait()\n    // add nft to marketplace\n    const listingPrice = ethers.utils.parseEther(price.toString())\n    await(await marketplace.makeItem(nft.address, id, listingPrice)).wait()\n  }\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n          <div className=\"content mx-auto\">\n            <Row className=\"g-4\">\n              <Form.Control\n                type=\"file\"\n                required\n                name=\"file\"\n                onChange={uploadToIPFS}\n              />\n              <Form.Control onChange={(e) => setName(e.target.value)} size=\"lg\" required type=\"text\" placeholder=\"Name\" />\n              <Form.Control onChange={(e) => setDescription(e.target.value)} size=\"lg\" required as=\"textarea\" placeholder=\"Description\" />\n              <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n              <div className=\"d-grid px-0\">\n                <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n                  Create & List NFT!\n                </Button>\n              </div>\n            </Row>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default Create"]},"metadata":{},"sourceType":"module"}
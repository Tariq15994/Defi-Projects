[{"/home/tariq/Defi-Projects/nft-market-place/frontend/src/index.js":"1","/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/App.js":"2","/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/Create.js":"3","/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/MyListedItems.js":"4","/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/Home.js":"5","/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/MyPurchases.js":"6","/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/Navbar.js":"7"},{"size":492,"mtime":1653308533550,"results":"8","hashOfConfig":"9"},{"size":3050,"mtime":1653738378437,"results":"10","hashOfConfig":"9"},{"size":3622,"mtime":1653461644725,"results":"11","hashOfConfig":"9"},{"size":3270,"mtime":1653465172532,"results":"12","hashOfConfig":"9"},{"size":2868,"mtime":1653479591245,"results":"13","hashOfConfig":"9"},{"size":2419,"mtime":1653465542962,"results":"14","hashOfConfig":"9"},{"size":2302,"mtime":1653464596630,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"ydkrfx",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"19"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/home/tariq/Defi-Projects/nft-market-place/frontend/src/index.js",[],[],["42","43"],"/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/App.js",[],[],"/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/Create.js",[],[],"/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/MyListedItems.js",["44"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card } from 'react-bootstrap'\n\nfunction renderSoldItems(items) {\n  return (\n    <>\n      <h2>Sold</h2>\n      <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\n        {items.map((item, idx) => (\n          <Col key={idx} className=\"overflow-hidden\">\n            <Card>\n              <Card.Img variant=\"top\" src={item.image} />\n              <Card.Footer>\n                For {ethers.utils.formatEther(item.totalPrice)} ETH - Recieved {ethers.utils.formatEther(item.price)} ETH\n              </Card.Footer>\n            </Card>\n          </Col>\n        ))}\n      </Row>\n    </>\n  )\n}\n\nexport default function MyListedItems({ marketplace, nft, account }) {\n  const [loading, setLoading] = useState(true)\n  const [listedItems, setListedItems] = useState([])\n  const [soldItems, setSoldItems] = useState([])\n  const loadListedItems = async () => {\n    // Load all sold items that the user listed\n    const itemCount = await marketplace.itemCount()\n    let listedItems = []\n    let soldItems = []\n    for (let indx = 1; indx <= itemCount; indx++) {\n      const i = await marketplace.items(indx)\n      if (i.seller.toLowerCase() === account) {\n        // get uri url from nft contract\n        const uri = await nft.tokenURI(i.tokenId)\n        // use uri to fetch the nft metadata stored on ipfs \n        const response = await fetch(uri)\n        const metadata = await response.json()\n        // get total price of item (item price + fee)\n        const totalPrice = await marketplace.getTotalPrice(i.itemId)\n        // define listed item object\n        let item = {\n          totalPrice,\n          price: i.price,\n          itemId: i.itemId,\n          name: metadata.name,\n          description: metadata.description,\n          image: metadata.image\n        }\n        listedItems.push(item)\n        // Add listed item to sold items array if sold\n        if (i.sold) soldItems.push(item)\n      }\n    }\n    setLoading(false)\n    setListedItems(listedItems)\n    setSoldItems(soldItems)\n  }\n  useEffect(() => {\n    loadListedItems()\n  }, [])\n  if (loading) return (\n    <main style={{   minHeight:'100vh',  color: 'White' ,fontWeight:'bold' ,fontFamily:'Poppins, sans-serif'}}>\n      <h2>Loading...</h2>\n      <div className='container'></div>\n    </main>\n  )\n  return (\n    <div className=\"flex justify-center\" style={{ minHeight:'100vh'}}>\n      {listedItems.length > 0 ?\n        <div className=\"px-5 py-3 container\">\n            <h2 style={ { padding: \"1rem 0\",  color: 'White' ,fontWeight:'bold' ,fontFamily:'Poppins, sans-serif'}}>Listed</h2>\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-3\">\n            {listedItems.map((item, idx) => (\n              <Col key={idx} className=\"overflow-hidden\">\n                <Card>\n                  <Card.Img variant=\"top\" src={item.image} />\n                  <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n            {soldItems.length > 0 && renderSoldItems(soldItems)}\n        </div>\n        : (\n          <main style={{ padding: \"1rem 0\" }}>\n            <h2>No listed assets</h2>\n          </main>\n        )}\n    </div>\n  );\n}","/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/Home.js",["45"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card, Button } from 'react-bootstrap'\n\nconst Home = ({ marketplace, nft }) => {\n  const [loading, setLoading] = useState(true)\n  const [items, setItems] = useState([])\n  const loadMarketplaceItems = async () => {\n    // Load all unsold items\n    const itemCount = await marketplace.itemCount()\n    let items = []\n    for (let i = 1; i <= itemCount; i++) {\n      const item = await marketplace.items(i)\n      if (!item.sold) {\n        // get uri url from nft contract\n        const uri = await nft.tokenURI(item.tokenId)\n        // use uri to fetch the nft metadata stored on ipfs \n        const response = await fetch(uri)\n        const metadata = await response.json()\n        // get total price of item (item price + fee)\n        const totalPrice = await marketplace.getTotalPrice(item.itemId)\n        // Add item to items array\n        items.push({\n          totalPrice,\n          itemId: item.itemId,\n          seller: item.seller,\n          name: metadata.name,\n          description: metadata.description,\n          image: metadata.image\n        })\n      }\n    }\n    setLoading(false)\n    setItems(items)\n  }\n\n  const buyMarketItem = async (item) => {\n    await (await marketplace.purchaseItem(item.itemId, { value: item.totalPrice })).wait()\n    loadMarketplaceItems()\n  }\n\n  useEffect(() => {\n    loadMarketplaceItems()\n  }, [])\n  if (loading) return (\n    <main  className=\"rooter\" style={ { padding: \"1rem 0\",  color: 'White' ,fontWeight:'bold' ,fontFamily:'Poppins, sans-serif'}}>\n      <h2>Loading...</h2>\n    </main>\n  )\n  return (\n    <div className=\"flex justify-center rooter\" style={{minHeight:'100vh'}} >\n      {items.length > 0 ?\n        <div className=\"px-5 container\">\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n            {items.map((item, idx) => (\n              <Col key={idx} className=\"overflow-hidden\">\n                <Card>\n                  <Card.Img variant=\"top\" src={item.image} />\n                  <Card.Body color=\"secondary\">\n                    <Card.Title>{item.name}</Card.Title>\n                    <Card.Text>\n                      {item.description}\n                    </Card.Text>\n                  </Card.Body>\n                  <Card.Footer>\n                    <div className='d-grid'>\n                      <Button onClick={() => buyMarketItem(item)} variant=\"primary\" size=\"lg\">\n                        Buy for {ethers.utils.formatEther(item.totalPrice)} ETH\n                      </Button>\n                    </div>\n                  </Card.Footer>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </div>\n        : (\n          <main style={{ padding: \"1rem 0\" }}>\n            <h2>No listed assets</h2>\n          </main>\n        )}\n    </div>\n  );\n}\nexport default Home",["46","47"],"/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/MyPurchases.js",["48"],[],"import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Col, Card } from 'react-bootstrap'\n\nexport default function MyPurchases({ marketplace, nft, account }) {\n  const [loading, setLoading] = useState(true)\n  const [purchases, setPurchases] = useState([])\n  const loadPurchasedItems = async () => {\n    // Fetch purchased items from marketplace by quering Offered events with the buyer set as the user\n    const filter =  marketplace.filters.Bought(null,null,null,null,null,account)\n    const results = await marketplace.queryFilter(filter)\n    //Fetch metadata of each nft and add that to listedItem object.\n    const purchases = await Promise.all(results.map(async i => {\n      // fetch arguments from each result\n      i = i.args\n      // get uri url from nft contract\n      const uri = await nft.tokenURI(i.tokenId)\n      // use uri to fetch the nft metadata stored on ipfs \n      const response = await fetch(uri)\n      const metadata = await response.json()\n      // get total price of item (item price + fee)\n      const totalPrice = await marketplace.getTotalPrice(i.itemId)\n      // define listed item object\n      let purchasedItem = {\n        totalPrice,\n        price: i.price,\n        itemId: i.itemId,\n        name: metadata.name,\n        description: metadata.description,\n        image: metadata.image\n      }\n      return purchasedItem\n    }))\n    setLoading(false)\n    setPurchases(purchases)\n  }\n  useEffect(() => {\n    loadPurchasedItems()\n  }, [])\n  if (loading) return (\n    <main style={{ padding: \"1rem 0\" ,minHeight:'100vh'}}>\n      <h2>Loading...</h2>\n    </main>\n  )\n  return (\n    <div className=\"flex justify-center rooter\">\n      {purchases.length > 0 ?\n        <div className=\"px-5 container\">\n          <Row xs={1} md={2} lg={4} className=\"g-4 py-5\">\n            {purchases.map((item, idx) => (\n              <Col key={idx} className=\"overflow-hidden\">\n                <Card>\n                  <Card.Img variant=\"top\" src={item.image} />\n                  <Card.Footer>{ethers.utils.formatEther(item.totalPrice)} ETH</Card.Footer>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </div>\n        : (\n          <main style={ { minHeight:\"100vh\", padding: \"1rem 0\",  color: 'White' ,fontWeight:'bold' ,fontFamily:'Poppins, sans-serif'}}>\n            <h2>No purchases</h2>\n          </main>\n        )}\n    </div>\n  );\n}","/home/tariq/Defi-Projects/nft-market-place/frontend/src/components/Navbar.js",[],[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":64,"column":6,"nodeType":"55","endLine":64,"endColumn":8,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":44,"column":6,"nodeType":"55","endLine":44,"endColumn":8,"suggestions":"58"},{"ruleId":"49","replacedBy":"59"},{"ruleId":"51","replacedBy":"60"},{"ruleId":"53","severity":1,"message":"61","line":39,"column":6,"nodeType":"55","endLine":39,"endColumn":8,"suggestions":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadListedItems'. Either include it or remove the dependency array.","ArrayExpression",["65"],"React Hook useEffect has a missing dependency: 'loadMarketplaceItems'. Either include it or remove the dependency array.",["66"],["63"],["64"],"React Hook useEffect has a missing dependency: 'loadPurchasedItems'. Either include it or remove the dependency array.",["67"],"no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},{"desc":"72","fix":"73"},"Update the dependencies array to be: [loadListedItems]",{"range":"74","text":"75"},"Update the dependencies array to be: [loadMarketplaceItems]",{"range":"76","text":"77"},"Update the dependencies array to be: [loadPurchasedItems]",{"range":"78","text":"79"},[2119,2121],"[loadListedItems]",[1428,1430],"[loadMarketplaceItems]",[1500,1502],"[loadPurchasedItems]"]